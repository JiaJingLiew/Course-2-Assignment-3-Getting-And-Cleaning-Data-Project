## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
data <- matrix(c(1, 1, 4, 0, 3, 1, 4, 4, 0), nrow=3, ncol=3)
m(data)
cacheSolve(data)
m
cacheSolve()
cachesolve(x)
data
m<-solve(data)
x
x<-m
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', destfile= paste0(getwd(), '/quiz3_data1.csv'),method = 'curl', quiet = T）
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',
destfile = paste0(getwd(), '/quiz3_data1.csv'), method = 'curl', quiet = T)
Q1data <- read.csv('quiz3_data1.csv')
agricultureLogical <- Q1data$ACR == 3 & Q1data$AGS == 6
agricultureLogical
agricultureLogical <- Q1data$ACR == 3 & Q1data$AGS == 6
which(agriculturelLogical)[1:3]
which(agricultureLogical)[1:3]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', destfile= paste0(getwd(), '/quiz3_data2.jpg'),method = 'web', quiet = T）
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg',
destfile = paste0(getwd(), '/quiz3_data2.jpg'), mode = 'web', quiet = T)
source("~/assignment.R")
Q2data <- readJPEG('quiz3_data2.jpg', native = T)
quantile(Q2data, probs = c(0.3, 0.8))
library(jpeg)
install.packages("jpeg")
library(jpeg)
library("jpeg")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, 'jeff.jpg'
, mode='wb' )
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
quantile(picture, probs = c(0.3, 0.8) )
quantile(picture, probs = c(0.3, 0.8) )
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg' , 'jeff.jpg', mode='wb')
picture <- jpeg::readJPEG('jeff.jpg', native=TRUE)
quantile(picture, probs = c(0.3, 0.8) )
library("data.table")
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', skip=4, nrows = 190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Economy", "Total"))
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
ncol(mergedDT)
nrow(mergedDT)
mergedDT
mergedDT[13,]
mergedDT[,13]
mergedDT[order(-Rank)][13,.(Economy)]
nrow(mergedDT)
mergedDT[order(-Rank)][13,.(Economy)]
mergedDT[order(-Rank)][13,(Economy)]
ave("High income: OECD")
ave(High income: OECD)
colnames(Q3GdpData) <- c('Code', 'Rank', 'Name', 'Income')
Q3GdpData$Income <- as.numeric(gsub(",", "", Q3GdpData$Income))
mergedDT[`Income Group` == "High income: OECD", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
install.packages('dplyr')
library(dplyr)
dplyr()
library('dplyr')
dplyr()
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
library("data.table")
communities <- data.table::fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
varNamesSplit <- strsplit(names(communities), "wgtp")
varNamesSplit[[123]]
strsplit(names(communities), "wgtp")
strsplit(names(communities), "wgtp")[123]
library("data.table")
communities <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ")
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', skip=5, nrows=190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Country", "GDP")
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5, nrows=190, select = c(1, 2, 4, 5), col.names=c("CountryCode", "Rank", "Country", "GDP"))
GDPrank[,mean(as.integer(gsub(pattern=',',replacement='',x=GDPrank)))]
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
grep("*United",countryNames)
grep("^United",GDPrank[, Country])
grep("^United",countryNames)
grep("^United",[,Country]), 3
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(GDPrank, eduDT, by = 'CountryCode')
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Notes`]), .N]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library("quantmod")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
timeDT <- data.table::data.table(timeCol = sampleTimes)
install.packages("quantmod")
library("quantmod")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
timeDT <- data.table::data.table(timeCol = sampleTimes)
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
timeDT[((timeCol >= "2012-01-01") & (timeCol < "2013-01-01")) & (weekdays(timeCol) == "Monday"), .N ]
timeDT[((timeCol >= "2012-01-01") & (timeCol < "2013-01-01")) & (weekdays(timeCol) == "Monday"), .N ]
install.packages("dplyr")
library(dplyr)
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
library("swirl")
swirl()
library("swirl")
swirl()
swirl()
0
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Regression Models")
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Regression Models")
swirl()
tibble::as_tibble("C:/Users/DMB30820930/Documents/R/win-library/4.1/swirl/Courses/Getting_and_Cleaning_Data/Manipulating_Data_with_dplyr/lesson.yaml",.rows = NULL,
.name_repair = c("check_unique", "unique", "universal", "minimal"),
rownames = pkgconfig::get_config("tibble::rownames", NULL))
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Regression Models")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_install("Getting and Cleaning Data")
install("swirl")
install(swirl
)
swirl()
read.csv(path2csv,stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf).
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cram,-time)
select(cran,-time)
size(-5:20)
select(cran, -(X:size))
-5:20
5:20
-(5:20)
select(cran,-(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(country (ascending), r_version (descending), ip_id(ascending))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran)
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
submit()
reset()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
reset()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
?n
?n_distinct
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country) ,avg_bytes = mean(size))
pack_sum
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
reset()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpGYt8JL/summarize1.R")
submit()
swirl()
library(swirl)
swirl()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/summarize1.R")
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
?arrange
/or
?/or
?desc
?/
?arrange
top_counts_sorted<-arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted.)
View(top_counts_sorted
.
View(top_counts_sorted
.)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
view(top_unique)
view()
View()
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/summarize2.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/summarize3.R")
submit()
submit()
View(result3)
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain1.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain1.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain2.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain3.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain3.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain3.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain3.R")
reset()
source("C:/Users/DMB308~1/AppData/Local/Temp/Rtmpw76zkN/chain3.R")
submit()
swirl()
library()
library(swirl)
swirl()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/chain3.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/chain4.R")
submit()
library(tidyr)
students
help(gather)
gather(students,sex,count,-grade)
students2
gather(students2,sex,count,-grade)
res<-gather(students2,sex,count,-grade)
res<-gather(students2, sex_class, count, -grade)
res
separate(data = res, col = sex_class, into= c("sex", "class"))
?separate
separate(data = res, col = sex_class, into= c("sex", "class"))
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script1.R")
submit()
students3
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script2.R")
submit()
spread(students3)
?spread
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script3.R")
submit()
library(readr)
parse_number("class5")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpcHqghE/script4.R")
library(swirl)
swirl()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
reset()
swirl()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpWYbisA/script4.R")
library(swirl)
swirl()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script4.R")
submit()
students4
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script5.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script6.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script7.R")
submit()
passed <- mutate(passed, status="passed")
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed,failed)
sat
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script8.R")
submit()
source("C:/Users/DMB308~1/AppData/Local/Temp/RtmpU9nNtw/script9.R")
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_momnet<-now()
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
ymd("1975 March 12")
mdy("March 12, 1975")
dmy("25th day of August 1985")
dmy(25081985)
ymd("192012")
mdy(January 2 1920)
mdy("January 2 1920")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
dt1_parsed <- ymd_hms(dt1)
dt1_parsed
class(dt1_parsed)
help("lubridate")
lubridate(this_moment,hours = 3, minutes = 22, seconds = 14)
hms(“03:22:14”)
hms(03:22:14)
hms(03,22,14)
hms("03:22:14")
dt2
ymd("dt2")
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours, minutes)
update(this_moment,hour=14,minute=20,seconds=0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(hours = 10, minutes = 16, seconds = 0)
update(this_moment,hours=10,minutes=16,seconds=0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34,seconds=0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
with_tz(arrive,”Asia/Hong_Kong”)
help(with_tz)
arrive<-with_tz(arrive,”Asia/Hong_Kong”)
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy(“June 17, 2008″,tz=”Singapore”)
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
help(interval)
how_long<-interval(arrive,last_time)
how_long <- interval(last_time,arrive)
how_long
period(how_long)
as.period(how_long)
stopwatch()
download.file(' https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip',
destfile = './hw4_data.zip', method = 'curl', quiet = T)
unzip(zipfile = 'hw4_data.zip')
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
combined <- rbind(train, test)
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.csv", quote = FALSE)
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.csv", quote = FALSE)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
savehistory("~/Course2 Assignment 3/Getting And Cleaning Data Project.Rhistory")
